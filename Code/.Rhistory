for(j in 1:n) p1[j] = exp(2 + 1.5*x[j])/(1 + exp(2 + 1.5*x[j]))
for(j in 1:n) a[j] = sample(c(1, 0), 1, replace = TRUE, prob = c(p[j], 1-p[j]))
epsilon <- rnorm(n)
y <- beta[1]*I + beta[2]*a + beta[3]*x + beta[4]*(x^2) + epsilon
data <- as.data.frame(cbind(y, a, x, p, p1, group))
model_ols <- lm(y ~ a + x, data)
beta_ols[i] <- model_ols$coefficients[2]
delta <- NULL
for(k in 1:10)
{
delta[k] <- mean(data$y[(data$group == k) & (data$a == 1)]) -
mean(data$y[(data$group == k) & (data$a == 0)])
}
beta_strat[i] <- mean(delta)
beta_weight[i] <- mean(a*y/p) - mean((1-a)*y/(1-p))
beta_weight_func[i] <- mean(a*y/p1) - mean((1-a)*y/(1-p1))
}
interval_ols <- quantile(beta_ols, c(0.025, 0.975), na.rm = TRUE)
interval_strat <- quantile(beta_strat, c(0.025, 0.975), na.rm = TRUE)
interval_weight <- quantile(beta_weight, c(0.025, 0.975), na.rm = TRUE)
interval_weight_fun <- quantile(beta_weight_func, c(0.025, 0.975), na.rm = TRUE)
tibble(type = c("OLS estimate", "Propensity score stratification",
"Inverse probability with true propensity score",
"Inverse probability with calulated propensity score"),
"lower bound" = c(interval_ols[1], interval_strat[1],
interval_weight[1], interval_weight_fun[1]),
"upper bound" = c(interval_ols[2], interval_strat[2],
interval_weight[2], interval_weight_fun[2])) %>%
as.data.frame()
plots <- NULL
plots[[1]] <- ggplot(table, aes(x = b_ols)) +
geom_histogram(aes(y = ..density..), color = "black", fill = "red") +
geom_density(alpha = 0.2) +
geom_vline(xintercept = b[2])
plots[[2]] <- ggplot(table, aes(x = b_strat)) +
geom_histogram(aes(y = ..density..), color = "black", fill = "blue") +
geom_density(alpha = 0.2) +
geom_vline(xintercept = b[2])
plots[[3]] <- ggplot(table, aes(x = b_weight)) +
geom_histogram(aes(y = ..density..), color = "black", fill = "green") +
geom_density(alpha = 0.2) +
xlim(-7,7) +
geom_vline(xintercept = b[2])
plots[[4]] <- ggplot(table, aes(x = b_weight_func)) +
geom_histogram(aes(y = ..density..), color = "black", fill = "yellow") +
geom_density(alpha = 0.2) +
xlim(-5, 3) +
geom_vline(xintercept = b[2])
plot_grid(plotlist = plots, nrow = 2)
table <- tibble(b_ols = b_ols,
b_strat = b_strat,
b_weight = b_weight,
b_weight_func = b_weight_func) %>%
as.data.frame()
table <- tibble(b_ols = b_ols,
b_strat = b_strat,
b_weight = b_weight,
b_weight_func = b_weight_func) %>%
as.data.frame()
table <- tibble(b_ols = beta_ols,
b_strat = beta_strat,
b_weight = beta_weight,
b_weight_func = beta_weight_func) %>%
as.data.frame()
plots <- NULL
plots[[1]] <- ggplot(table, aes(x = b_ols)) +
geom_histogram(aes(y = ..density..), color = "black", fill = "red") +
geom_density(alpha = 0.2) +
geom_vline(xintercept = b[2])
plots[[2]] <- ggplot(table, aes(x = b_strat)) +
geom_histogram(aes(y = ..density..), color = "black", fill = "blue") +
geom_density(alpha = 0.2) +
geom_vline(xintercept = b[2])
plots[[3]] <- ggplot(table, aes(x = b_weight)) +
geom_histogram(aes(y = ..density..), color = "black", fill = "green") +
geom_density(alpha = 0.2) +
xlim(-7,7) +
geom_vline(xintercept = b[2])
plots[[4]] <- ggplot(table, aes(x = b_weight_func)) +
geom_histogram(aes(y = ..density..), color = "black", fill = "yellow") +
geom_density(alpha = 0.2) +
xlim(-5, 3) +
geom_vline(xintercept = b[2])
plot_grid(plotlist = plots, nrow = 2)
Do the simulations 1,000 times and estimate ATE, $\beta_{1}$ in this case, with four methods:
i) *OLS estimate* based on the working model:
$$Y_{i}=\beta_{0}^{ols}+\beta_{1}^{ols}A_{i}+\beta_{2}^{ols}X_{i}+\epsilon_{i}$$;
ii) *Propensity Score Stratification*;
iii) *Inverse Probability Weighting using the true propensity score* ($P(A_{i}=1|X_{i})$);
iv) *Inverse Probability Weighting using the propensity score function*
$$P(A_{i}=1|X_{i})=\frac{exp(2+1.5X_{i})}{1+exp(2+1.5X_{i})}$$
lyft <- read.csv("lyft.csv")
lyft <-select(lyft,-c(4))
head(lyft)
#Cleaning,Wrangling and Formatting the data
lyft$time_of_trip <- as.POSIXct(lyft$time_of_trip, format = "%m/%d/%Y %H:%M")
lyft$time_of_trip<- ymd_hms(lyft$time_of_trip)
lyft <- lyft %>% mutate(year = year(time_of_trip),
month = month(time_of_trip),
day = day(time_of_trip),
hour = hour(time_of_trip),
minute = minute(time_of_trip))
setwd("~/Desktop/PROJECT/Code")
lyft <- read.csv("lyft.csv")
lyft <-select(lyft,-c(4))
head(lyft)
#Cleaning,Wrangling and Formatting the data
lyft$time_of_trip <- as.POSIXct(lyft$time_of_trip, format = "%m/%d/%Y %H:%M")
lyft$time_of_trip<- ymd_hms(lyft$time_of_trip)
lyft <- lyft %>% mutate(year = year(time_of_trip),
month = month(time_of_trip),
day = day(time_of_trip),
hour = hour(time_of_trip),
minute = minute(time_of_trip))
library(ggplot2)
library(ggthemes)
library(lubridate)
library(dplyr)
library(tidyr)
library(DT)
library(scales)
library(wesanderson)
library(stringr)
library(RColorBrewer)
library(ggfortify)
library(ggrepel)
library(kableExtra)
library(gridExtra)
library(pdftools)
library(tidyverse)
lyft <- lyft %>% mutate(year = year(time_of_trip),
month = month(time_of_trip),
day = day(time_of_trip),
hour = hour(time_of_trip),
minute = minute(time_of_trip))
month_lyft <- lyft %>%
group_by(month) %>%
summarize(Count = n()) %>%
arrange(desc(Count))
head(month_lyft)
month_lyft <- month_lyft %>%
mutate(`month` = str_trim(`month`)) %>%
mutate(month = case_when(`month` == "4" ~ 'April',
`month` == "5" ~ 'May',
`month` == "6" ~ 'June',
`month` == "7" ~ 'July',`month` == "8" ~ 'August',`month` == "9" ~ 'September'))
month_uber <- month_uber %>%
mutate(`month` = str_trim(`month`)) %>%
mutate(month = case_when(`month` == "4" ~ 'April',
`month` == "5" ~ 'May',
`month` == "6" ~ 'June',
`month` == "7" ~ 'July',`month` == "8" ~ 'August',`month` == "9" ~ 'September'))
month_lyft <- month_lyft %>%
mutate(Type = "Lyft")
month_uber <- month_uber %>%
mutate(Type = "Uber")
ggplot(data = month_uber_lyft, aes(x = Type, y = Count, group = month)) +
geom_line(aes(color = month), size = 1.5) +
geom_point(aes(color = month), size = 4) + scale_x_discrete(position = "top") +
geom_text(data = month_uber_lyft,
aes(label = paste0(Count)) ,
hjust = -.45,
fontface = "bold",
size = 3.5) +
# moving x labels
scale_x_discrete(position = "top")  +
# Removing border
theme(panel.border=element_blank()) +
# Removing  the y axis
theme(axis.title.y=element_blank()) +
theme(axis.text.y=element_blank()) +
theme(panel.grid.major.y=element_blank()) +
theme(panel.grid.minor.y=element_blank()) +
# Cleaning up x axis
theme(axis.title.x = element_blank()) +
theme(panel.grid.major.x = element_blank()) +
theme(axis.text.x.top = element_text(size=15)) +
# cleaning and removing x & y tick marks
theme(axis.ticks=element_blank()) +
theme(plot.title=element_text(size=8, hjust = 0.8)) +
theme(plot.subtitle=element_text(hjust = 0.8))+ggtitle("Trip Count by Months for Uber and Lyft")
#Getting data insights from both month and hour perspective
month_lyft <- lyft %>%
group_by(month) %>%
summarize(Count = n()) %>%
arrange(desc(Count))
head(month_lyft)
#Using case when to change the month numbers to month names
month_lyft <- month_lyft %>%
mutate(`month` = str_trim(`month`)) %>%
mutate(month = case_when(`month` == "4" ~ 'April',
`month` == "5" ~ 'May',
`month` == "6" ~ 'June',
`month` == "7" ~ 'July',`month` == "8" ~ 'August',`month` == "9" ~ 'September'))
month_uber <- month_uber %>%
mutate(`month` = str_trim(`month`)) %>%
mutate(month = case_when(`month` == "4" ~ 'April',
`month` == "5" ~ 'May',
`month` == "6" ~ 'June',
`month` == "7" ~ 'July',`month` == "8" ~ 'August',`month` == "9" ~ 'September'))
#Making a column in LYFT
month_lyft <- month_lyft %>%
mutate(Type = "Lyft")
#Making a column in Uber
month_uber <- month_uber %>%
mutate(Type = "Uber")
month_uber <- filter(month_uber, month == "September"| month == "August"|month == "July")
month_uber_lyft <- rbind(month_lyft,month_uber)
ggplot(data = month_uber_lyft, aes(x = Type, y = Count, group = month)) +
geom_line(aes(color = month), size = 1.5) +
geom_point(aes(color = month), size = 4) + scale_x_discrete(position = "top") +
geom_text(data = month_uber_lyft,
aes(label = paste0(Count)) ,
hjust = -.45,
fontface = "bold",
size = 3.5) +
# moving x labels
scale_x_discrete(position = "top")  +
# Removing border
theme(panel.border=element_blank()) +
# Removing  the y axis
theme(axis.title.y=element_blank()) +
theme(axis.text.y=element_blank()) +
theme(panel.grid.major.y=element_blank()) +
theme(panel.grid.minor.y=element_blank()) +
# Cleaning up x axis
theme(axis.title.x = element_blank()) +
theme(panel.grid.major.x = element_blank()) +
theme(axis.text.x.top = element_text(size=15)) +
# cleaning and removing x & y tick marks
theme(axis.ticks=element_blank()) +
theme(plot.title=element_text(size=8, hjust = 0.8)) +
theme(plot.subtitle=element_text(hjust = 0.8))+ggtitle("Trip Count by Months for Uber and Lyft")
month_uber <- month_uber %>%
mutate(Type = "Uber")
month_uber <- filter(month_uber, month == "September"| month == "August"|month == "July")
month_uber_lyft <- rbind(month_lyft,month_uber)
ggplot(data = month_uber_lyft, aes(x = Type, y = Count, group = month)) +
geom_line(aes(color = month), size = 1.5) +
geom_point(aes(color = month), size = 4) + scale_x_discrete(position = "top") +
geom_text(data = month_uber_lyft,
aes(label = paste0(Count)) ,
hjust = -.45,
fontface = "bold",
size = 3.5) +
# moving x labels
scale_x_discrete(position = "top")  +
# Removing border
theme(panel.border=element_blank()) +
# Removing  the y axis
theme(axis.title.y=element_blank()) +
theme(axis.text.y=element_blank()) +
theme(panel.grid.major.y=element_blank()) +
theme(panel.grid.minor.y=element_blank()) +
# Cleaning up x axis
theme(axis.title.x = element_blank()) +
theme(panel.grid.major.x = element_blank()) +
theme(axis.text.x.top = element_text(size=15)) +
# cleaning and removing x & y tick marks
theme(axis.ticks=element_blank()) +
theme(plot.title=element_text(size=8, hjust = 0.8)) +
theme(plot.subtitle=element_text(hjust = 0.8))+ggtitle("Trip Count by Months for Uber and Lyft")
library(ggplot2)
library(ggthemes)
library(lubridate)
library(dplyr)
library(tidyr)
library(DT)
library(scales)
library(wesanderson)
library(stringr)
library(RColorBrewer)
library(ggfortify)
library(ggrepel)
library(kableExtra)
library(gridExtra)
library(pdftools)
library(tidyverse)
head(month_uber)
View(month_uber_lyft)
month_uber <- df_uber %>%
group_by(month) %>%
summarize(Count = n()) %>%
arrange(desc(Count))
head(month_uber)
month_uber <- month_uber %>%
mutate(`month` = str_trim(`month`)) %>%
mutate(month = case_when(`month` == "4" ~ 'April',
`month` == "5" ~ 'May',
`month` == "6" ~ 'June',
`month` == "7" ~ 'July',`month` == "8" ~ 'August',`month` == "9" ~ 'September'))
#Making a column in LYFT
month_lyft <- month_lyft %>%
mutate(Type = "Lyft")
head(month_uber)
#Making a column in Uber
month_uber <- month_uber %>%
mutate(Type = "Uber")
month_uber <- filter(month_uber, month == "September"| month == "August"|month == "July")
month_uber_lyft <- rbind(month_lyft,month_uber)
ggplot(data = month_uber_lyft, aes(x = Type, y = Count, group = month)) +
geom_line(aes(color = month), size = 1.5) +
geom_point(aes(color = month), size = 4) + scale_x_discrete(position = "top") +
geom_text(data = month_uber_lyft,
aes(label = paste0(Count)) ,
hjust = -.45,
fontface = "bold",
size = 3.5) +
# moving x labels
scale_x_discrete(position = "top")  +
# Removing border
theme(panel.border=element_blank()) +
# Removing  the y axis
theme(axis.title.y=element_blank()) +
theme(axis.text.y=element_blank()) +
theme(panel.grid.major.y=element_blank()) +
theme(panel.grid.minor.y=element_blank()) +
# Cleaning up x axis
theme(axis.title.x = element_blank()) +
theme(panel.grid.major.x = element_blank()) +
theme(axis.text.x.top = element_text(size=15)) +
# cleaning and removing x & y tick marks
theme(axis.ticks=element_blank()) +
theme(plot.title=element_text(size=8, hjust = 0.8)) +
theme(plot.subtitle=element_text(hjust = 0.8))+ggtitle("Trip Count by Months for Uber and Lyft")
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(ggthemes)
library(lubridate)
library(dplyr)
library(tidyr)
library(DT)
library(scales)
library(wesanderson)
library(stringr)
library(RColorBrewer)
library(ggfortify)
library(ggrepel)
library(kableExtra)
library(gridExtra)
library(pdftools)
library(tidyverse)
hour_lyft <- lyft %>%
group_by(hour) %>%
summarize(Count = n()) %>%
arrange(desc(Count))
h2<- ggplot(hour_lyft, aes(hour, Count)) + geom_point(color='mediumvioletred') +geom_line()+ggtitle("Trip Count by Hours Lyft") +
geom_smooth(color='darkgreen')+ geom_text(aes(label=hour),hjust=0.5, vjust=2)
h2
grid <- grid.arrange(h1,h2,ncol=2, nrow=1)
grid
options(scipen =999)
hour_uber <- filter(hour_uber, month == "September"| month == "August"|month == "July")
hour_uber <- filter(df_uber, month == "September"| month == "August"|month == "July")
hour_uber  <- df_uber %>%
group_by(hour) %>%
summarize(Count = n()) %>%
arrange(desc(Count))
h3<- ggplot(hour_uber, aes(hour, Count)) + geom_point(color='mediumvioletred') +geom_line()+ggtitle("Trip Count by Hours Lyft") +
geom_smooth(color='darkgreen')+ geom_text(aes(label=hour),hjust=0.5, vjust=2)
h3
hour_uber1 <- filter(df_uber, month == "September"| month == "August"|month == "July")
hour_uber1  <- df_uber %>%
group_by(hour) %>%
summarize(Count = n()) %>%
arrange(desc(Count))
h3<- ggplot(hour_uber1, aes(hour, Count)) + geom_point(color='mediumvioletred') +geom_line()+ggtitle("Trip Count by Hours Uber") +
geom_smooth(color='darkgreen')+ geom_text(aes(label=hour),hjust=0.5, vjust=2)
h3
options(scipen =999)
hour_lyft <- lyft %>%
group_by(hour) %>%
summarize(Count = n()) %>%
arrange(desc(Count))
h2<- ggplot(hour_lyft, aes(hour, Count)) + geom_point(color='mediumvioletred') +geom_line()+ggtitle("Trip Count by Hours Lyft") +
geom_smooth(color='darkgreen')+ geom_text(aes(label=hour),hjust=0.5, vjust=2)
h2
grid <- grid.arrange(h3,h2,ncol=2, nrow=1)
grid
install.packages("earth")
install.packages("imputeTS")
library(earth)
install.packages("roll")
library(tidyverse)
library(dummies)
library(caTools)
install.packages("caTools")
library(caTools)
library(purrr)
library(roll)
library(dplyr)
data_url = "https://raw.githubusercontent.com/zzhangusf/Predicting-Fantasy-Football-Points-Using-Machine-Learning/master/data/aggregated_2015.csv"
df = read.csv(data_url)
# sort by playerID, weeks
df = df %>%
arrange(playerID, weeks, Team, Pos)
tail(df)
df = df %>%
mutate(home = ifelse(h.a == 'h', TRUE, FALSE))
rolling_average = function(dframe, window) {
x = runmean(dframe, window)
x = roll_mean(dframe, width = window, min_obs = 1)
return(shift(x, 1))
#return(x)
}
new_df <- df %>%
group_by(Oppt, Pos) %>%
arrange(weeks) %>%
mutate(pref.fd.defense = rolling_average(FD.points, 1)) %>%
mutate(roll_avg_def = rolling_average(FD.points, 4))
new_df <- new_df %>%
group_by(playerID) %>%
arrange(weeks) %>%
mutate(FD.prev.points = rolling_average(FD.points, 1)) %>%
mutate(roll_avg_FD.pts = rolling_average(FD.points, 4))
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
df = df %>%
mutate(home = ifelse(h.a == 'h', TRUE, FALSE))
rolling_average = function(dframe, window) {
x = runmean(dframe, window)
x = roll_mean(dframe, width = window, min_obs = 1)
return(shift(x, 1))
#return(x)
}
new_df <- df %>%
group_by(Oppt, Pos) %>%
arrange(weeks) %>%
mutate(pref.fd.defense = rolling_average(FD.points, 1)) %>%
mutate(roll_avg_def = rolling_average(FD.points, 4))
new_df <- new_df %>%
group_by(playerID) %>%
arrange(weeks) %>%
mutate(FD.prev.points = rolling_average(FD.points, 1)) %>%
mutate(roll_avg_FD.pts = rolling_average(FD.points, 4))
bigdf3 <- left_join(daymonth_uber, weatherdf, by = c("month" = "month","day" = "day"))
bigdf3  <- bigdf3  %>%
mutate(`month` = str_trim(`month`)) %>%
mutate(month = case_when(`month` == "4" ~ 'April',
`month` == "5" ~ 'May',
`month` == "6" ~ 'June',
`month` == "7" ~ 'July',`month` == "8" ~ 'August',`month` == "9" ~ 'September'))
daymonth_uber <- df_uber %>%
group_by(day,month) %>%
summarize(Count = n()) %>%
arrange(desc(Count))
bigdf3 <- left_join(daymonth_uber, weatherdf, by = c("month" = "month","day" = "day"))
bigdf3  <- bigdf3  %>%
mutate(`month` = str_trim(`month`)) %>%
mutate(month = case_when(`month` == "4" ~ 'April',
`month` == "5" ~ 'May',
`month` == "6" ~ 'June',
`month` == "7" ~ 'July',`month` == "8" ~ 'August',`month` == "9" ~ 'September'))
listofdfs <- list()
for (i in c <- list("aprilw.pdf","mayw.pdf","junew.pdf","julyw.pdf","augustw.pdf","septemberw.pdf")) {
PDF <- pdf_text(i) %>%
readr::read_lines()
PDF
PDF.weather <-PDF[-c(1:3,36:46)] # remove lines
PDF.weather
all_stat_lines <- PDF.weather[3:32] %>%
str_squish() %>%
strsplit(split = " ")# remove empty spaces
col_lines <- c("Date", "Maximum", "Minimum", "Average", "Departure","HDD", "CDD","Precipitation", "NewSnow", "SnowDepth") # create your variable names
df <- plyr::ldply(all_stat_lines) #create a data frame
colnames(df) <- col_lines
final_df <- as_tibble(df)
listofdfs[[i]] <- final_df
}
weatherdf <- bind_rows(listofdfs)
weatherdf$Date <- as.Date(weatherdf$Date)
weatherdf$Maximum <- as.numeric(weatherdf$Maximum)
weatherdf$Minimum <- as.numeric(weatherdf$Minimum)
weatherdf$Average <- as.numeric(weatherdf$Average)
weatherdf$Departure <- as.numeric(weatherdf$Departure)
weatherdf$HDD <- as.numeric(weatherdf$HDD)
weatherdf$CDD <- as.numeric(weatherdf$CDD)
weatherdf$Precipitation <- as.numeric(weatherdf$Precipitation)
weatherdf$NewSnow <- as.numeric(weatherdf$NewSnow)
weatherdf$SnowDepth  <- as.numeric(weatherdf$SnowDepth )
#Removing NAS
weatherdf[is.na(weatherdf)] <- 0
weatherdf <- weatherdf %>% mutate(Date = date(Date), year = year(Date),
month = month(Date),
day = day(Date))
#Getting the count of trips by day in nyc
daymonth_uber <- df_uber %>%
group_by(day,month) %>%
summarize(Count = n()) %>%
arrange(desc(Count))
bigdf3 <- left_join(daymonth_uber, weatherdf, by = c("month" = "month","day" = "day"))
bigdf3  <- bigdf3  %>%
mutate(`month` = str_trim(`month`)) %>%
mutate(month = case_when(`month` == "4" ~ 'April',
`month` == "5" ~ 'May',
`month` == "6" ~ 'June',
`month` == "7" ~ 'July',`month` == "8" ~ 'August',`month` == "9" ~ 'September'))
ggplot(bigdf3, aes(Average, Count, color=month))+geom_line()+geom_point()+ggtitle("Trip Count Weather Effect") +
geom_smooth(color='black')
ggplot(data = bigdf3, aes(x = Maximum, y =Count, color = month)) +
geom_point()+geom_boxplot()
sepdfw  <- filter(bigdf3, month == "September")
ggplot(sepdfw, aes(Average, Count))+geom_line()+geom_point(color='orange')+ggtitle("September:Trip Count Daily Average Temperature Effect") +
geom_smooth(color='red')
ggplot(sepdfw, aes(Precipitation, Count))+geom_line(color="blue")+geom_point(color="orange")+ggtitle("September:Trip Count Precitipation Effect")+
geom_text(aes(label=day),hjust=0.03, vjust=0.7)
ggplot(aprildfw, aes(Average, Count))+geom_line()+geom_point(color='orange')+ggtitle("April:Trip Count Daily Average Temperature Effect") +
geom_smooth(color='red')
aprildfw  <- filter(bigdf3, month == "April")
ggplot(aprildfw, aes(Precipitation, Count))+geom_line(color="red")+geom_point(color="yellow")+ggtitle("April:Trip Count Precitipation Effect")+
geom_text(aes(label=day),hjust=0.03, vjust=0.7)
